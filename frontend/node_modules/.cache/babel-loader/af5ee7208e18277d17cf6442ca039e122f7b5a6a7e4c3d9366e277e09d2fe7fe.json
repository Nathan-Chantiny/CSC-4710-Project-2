{"ast":null,"code":"import { jwtDecode } from 'jwt-decode'; // Correct import syntax for jwt-decode\n\nexport const getUsernameFromToken = () => {\n  const token = localStorage.getItem('token'); // Get the token from localStorage\n  if (!token) return null;\n  try {\n    const decoded = jwtDecode(token); // Decode the token to get user information\n    return decoded.username; // Assuming the token has a \"username\" field\n  } catch (error) {\n    console.error('Failed to decode token:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["jwtDecode","getUsernameFromToken","token","localStorage","getItem","decoded","username","error","console"],"sources":["D:/CSC/CSC 4710/CSC-4710-Project-2/frontend/src/utils.js"],"sourcesContent":["import { jwtDecode } from 'jwt-decode'; // Correct import syntax for jwt-decode\r\n\r\nexport const getUsernameFromToken = () => {\r\n  const token = localStorage.getItem('token'); // Get the token from localStorage\r\n  if (!token) return null;\r\n\r\n  try {\r\n    const decoded = jwtDecode(token); // Decode the token to get user information\r\n    return decoded.username; // Assuming the token has a \"username\" field\r\n  } catch (error) {\r\n    console.error('Failed to decode token:', error);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY,CAAC,CAAC;;AAExC,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACxC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAI,CAACF,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAI;IACF,MAAMG,OAAO,GAAGL,SAAS,CAACE,KAAK,CAAC,CAAC,CAAC;IAClC,OAAOG,OAAO,CAACC,QAAQ,CAAC,CAAC;EAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}